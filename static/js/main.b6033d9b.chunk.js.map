{"version":3,"sources":["contexts/CalculatorContext.js","components/Buttons.js","components/Display.js","App.js","index.js"],"names":["CalculatorContext","createContext","CalculatorContextProvider","props","useState","currentValue","setCurrentValue","previousValue","setPreviousValue","isDark","setIsDark","useEffect","mode","localStorage","getItem","ProviderValue","useMemo","Provider","value","children","Buttons","document","addEventListener","e","d","keyCode","addDigit","backSpace","removeEventListener","useContext","val","split","includes","length","match","v","useCallback","slice","clearMemory","evaluate","x","n","mathParser","eval","replace","Math","round","pow","className","onClick","dangerouslySetInnerHTML","__html","Display","toggleColorMode","target","checked","setItem","for","type","onChange","id","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.b6033d9b.chunk.js","sourcesContent":["import React, {createContext, useState, useMemo, useEffect} from \"react\"\r\n\r\nexport const CalculatorContext = createContext({})\r\n\r\nexport const CalculatorContextProvider = props => {\r\n\r\n    const [currentValue, setCurrentValue] = useState(\"\")\r\n    const [previousValue, setPreviousValue] = useState(\"\")\r\n    const [isDark, setIsDark] = useState(false)\r\n\r\n    useEffect(() => {\r\n        const mode = localStorage.getItem(\"colorMode\")\r\n        setIsDark(mode === \"true\")\r\n    },[])\r\n\r\n    const ProviderValue = useMemo(() => ({\r\n        currentValue,\r\n        setCurrentValue,\r\n        previousValue,\r\n        setPreviousValue,\r\n        isDark,\r\n        setIsDark\r\n    }), [currentValue, setCurrentValue, previousValue, setPreviousValue, isDark, setIsDark])\r\n\r\n    return (\r\n        <CalculatorContext.Provider\r\n            value={ProviderValue}\r\n        >\r\n            {props.children}\r\n        </CalculatorContext.Provider>\r\n    )\r\n}","import React, { useContext, useCallback, useEffect, useRef } from 'react';\r\nimport \"./Buttons.css\"\r\nimport BackspaceIcon from '@material-ui/icons/Backspace'\r\nimport mathParser from \"math-expression-evaluator\"\r\n\r\nimport { CalculatorContext } from \"../contexts/CalculatorContext\"\r\n\r\nconst round = (x, n) => {\r\n    return Math.round(x * Math.pow(10, n)) / Math.pow(10, n)\r\n}\r\n\r\nconst Buttons = () => {\r\n\r\n    useEffect(() => {\r\n        document.addEventListener(\"keydown\", e => {\r\n            const d = -1 * (48 - e.keyCode)\r\n            if (d < 10 && d >= 0) {\r\n                addDigit(d)\r\n            } else if (e.keyCode === 8) {\r\n                backSpace()\r\n            }\r\n        })\r\n        return () => {\r\n            document.removeEventListener(\"keydown\")\r\n        }\r\n    }, [])\r\n    \r\n    const {\r\n        setCurrentValue,\r\n        setPreviousValue,\r\n        currentValue\r\n    } = useContext(CalculatorContext)\r\n\r\n    const addDigit = (d => {\r\n\r\n        const val = currentValue\r\n        const symboltest = \"/x-+\"\r\n        if (symboltest.split(\"\").includes(d)){\r\n            if (val.length <= 0 || val.match(/[/\\-+x]$/g)){\r\n                return\r\n            }\r\n        }\r\n\r\n        setCurrentValue(v => v+\"\"+d)\r\n    })\r\n\r\n    const backSpace = useCallback(() => {\r\n        setCurrentValue(v => (\"\" + v).slice(0, (\"\"+v).length-1))\r\n    },[setCurrentValue])\r\n\r\n    const clearMemory = useCallback(() => {\r\n        setCurrentValue(\"\")\r\n        setPreviousValue(\"\")\r\n    }, [setCurrentValue,setPreviousValue])\r\n\r\n    const evaluate = useCallback(() => {\r\n        if(currentValue.match(/[/\\-+x.]$/g)){\r\n            return\r\n        }\r\n        setPreviousValue(currentValue)\r\n        setCurrentValue(\"\"+round(mathParser.eval(currentValue.replace(/x/g, \"*\")), 6))\r\n    },[setPreviousValue, setCurrentValue, currentValue])\r\n\r\n    \r\n    return (\r\n        <div className=\"button-box\">\r\n            <button onClick={clearMemory} className=\"div right\">C</button>\r\n            <button onClick={backSpace} className=\"div right\"><BackspaceIcon/></button>\r\n            <button onClick={() => addDigit(\"/100\")} className=\"div right\">%</button>\r\n            <button onClick={() => addDigit(\"/\")} className=\"div right\" dangerouslySetInnerHTML={{\r\n                __html: `&divide`\r\n            }}></button>\r\n            <button onClick={() => addDigit(\"7\")} className=\"div\">7</button>\r\n            <button onClick={() => addDigit(\"8\")} className=\"div\">8</button>\r\n            <button onClick={() => addDigit(\"9\")} className=\"div\">9</button>\r\n            <button onClick={() => addDigit(\"x\")} className=\"div right\" dangerouslySetInnerHTML={{\r\n                __html: `&times`\r\n            }}></button>\r\n            <button onClick={() => addDigit(\"4\")} className=\"div\">4</button>\r\n            <button onClick={() => addDigit(\"5\")} className=\"div\">5</button>\r\n            <button onClick={() => addDigit(\"6\")} className=\"div\">6</button>\r\n            <button onClick={() => addDigit(\"-\")} className=\"div right\">-</button>\r\n            <button onClick={() => addDigit(\"1\")} className=\"div\">1</button>\r\n            <button onClick={() => addDigit(\"2\")} className=\"div\">2</button>\r\n            <button onClick={() => addDigit(\"3\")} className=\"div\">3</button>\r\n            <button onClick={() => addDigit(\"+\")} className=\"div right\">+</button>\r\n            <button onClick={() => addDigit(\"0\")} className=\"div double\">0</button>\r\n            <button onClick={() => addDigit(\".\")} className=\"div\">.</button>\r\n            <button onClick={evaluate} className=\"div right\">=</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Buttons;\r\n","import React, { useContext, useCallback } from 'react';\r\nimport { CalculatorContext} from \"../contexts/CalculatorContext\"\r\n\r\nimport \"./Display.css\"\r\n\r\nconst Display = () => {\r\n\r\n    const {\r\n        currentValue,\r\n        previousValue,\r\n        isDark,\r\n        setIsDark\r\n    } = useContext(CalculatorContext)\r\n\r\n    const toggleColorMode = useCallback(e => {\r\n        setIsDark(e.target.checked)\r\n        localStorage.setItem(\"colorMode\", e.target.checked)\r\n    },[setIsDark])\r\n\r\n    return (\r\n        <div className=\"display\">\r\n            <label for=\"toggle\" className=\"switch\">\r\n                <input type=\"checkbox\" checked={isDark} onChange={toggleColorMode} id=\"toggle\"/>\r\n                    <div className=\"toggle-body\">\r\n                        <div className=\"indicator\"></div>\r\n                    </div>\r\n            </label>\r\n            <div className=\"previous\">{previousValue}</div>\r\n            <div className=\"current\">{currentValue}</div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Display;","import React, { useContext } from 'react';\nimport './App.css';\nimport Buttons from \"./components/Buttons\"\nimport Display from \"./components/Display\"\nimport { CalculatorContext } from './contexts/CalculatorContext';\n\nfunction App() {\n\n  const {isDark} = useContext(CalculatorContext)\n\n  return (\n    <main className={`App ${isDark && \"light\"}`}>\n      <Display/>\n      <Buttons/>\n    </main>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { CalculatorContextProvider } from \"./contexts/CalculatorContext\"\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <CalculatorContextProvider>\n      <App />\n    </CalculatorContextProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}